package dk.slott.super_volley.managers;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

import android.app.Activity;
import android.util.Log;

import com.android.volley.Request;
import com.android.volley.Request.Method;

import dk.slott.super_volley.R;
import dk.slott.super_volley.config.Config;
import dk.slott.super_volley.models.Access;
import dk.slott.super_volley.models.Actor;
import dk.slott.super_volley.models.ArtWork;
import dk.slott.super_volley.models.Bookmark;
import dk.slott.super_volley.models.Bookmarks;
import dk.slott.super_volley.models.Channel;
import dk.slott.super_volley.models.Devices;
import dk.slott.super_volley.models.ErrorModel;
import dk.slott.super_volley.models.Frontpages;
import dk.slott.super_volley.models.Genre;
import dk.slott.super_volley.models.Item;
import dk.slott.super_volley.models.MovieInfo;
import dk.slott.super_volley.models.Movies;
import dk.slott.super_volley.models.Page;
import dk.slott.super_volley.models.Program;
import dk.slott.super_volley.models.Programs;
import dk.slott.super_volley.models.ResultModel;
import dk.slott.super_volley.models.Status;
import dk.slott.super_volley.models.StreamUrl;
import dk.slott.super_volley.models.Suggestions;
import dk.slott.super_volley.models.Theme;
import dk.slott.super_volley.models.TvShow;
import dk.slott.super_volley.models.TvShowSeason;
import dk.slott.super_volley.models.TvShows;
import dk.slott.super_volley.models.User;
import dk.slott.super_volley.models.WatchTVArchiveStructure;
import dk.slott.super_volley.models.WatchTVStrucure;

public class DataManagerNG_example extends DataManagerHelper{
	protected static final String TAG = DataManagerNG_example.class.getSimpleName();
	private final SimpleDateFormat timeDataFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm", new Locale("Da-dk"));

	private static String FIELDS_LITE = "id,type,title,cmore,name,artwork.medium,covers.micro,covers.small,covers.medium,covers.large,covers.big,cover_prefix,genres,popularity_score,year,available_from";
	private static String FIELDS_FRONTPAGE = "id,type,title,cast,cmore,name,artwork.medium,covers.micro,covers.small,covers.medium,covers.large,covers.big,cover_prefix";
	private static String QUERY_PATTERN = Config.QUERY_PATTERN;
	private static final int IMAGE_QUALITY = 75;
	private static enum Function {
		MOVIEINFO("movieinfo"), FAVORITES("favorites"), FAVORITE("favorite"), ALL("all"), GENRES("genres"), SEARCH("search"), RELATED("related"), TVSHOWS("tvshows"), THEMES("themes"), LOGIN("login"), LOGOUT("logout"), USER("user"), MOVIELOG("movielog"), ALLOWED_CHANNELS("allowed_channels"), KEEPALIVE("keepalive"), TYPEAHEAD_SEARCH("typeahead_search"), NOWANDNEXT("nowandnext"), TVSHOW("tvshow"), MOVIES_IN_THEME("movies_in_theme"), MOVIES_IN_GENRE("movies_in_genre"), TVSHOWSEASON("tvshowseason"), TEASERS("teasers"), DEVICE("device"), ISYOUSEEIP("isyouseeip"), DEVICES("devices"), MOVIEACCESS("movieaccess"), BOOKMARK("bookmark"), STREAMURL("streamurl"), IMAGE("image"), PAGE("page"), SOCIALREGISTRATION("socialregistration"), CONFIGURATION("configuration"), BOOKMARKS("bookmarks"), PROGRAMS("programs"), POPULAR_PROGRAMS("popularprograms"), FAVORITES_SORTORDER("favorites_sortorder");
		private String string;
		Function(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}
	private static enum Area {
		LIVETV("livetv"), MOVIE("movie"), USERS("users"), TVGUIDE("tvguide"), ARCHIVE("archive"), SYSTEM("system"), CONTENT("content");
		private String string;
		Area(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}
	public static enum Parameter {
		LIMIT("limit"), SORT("sort"), SORTDIRECTION("sortdirection"), OFFSET("offset"), ONLYSVOD("onlysvod"), ONLYTVOD("onlytvod"), ONLY100MOVIES("only100movies"), YEAR("year"), MOVIE_ID("movie_id"), ID("id"), EXCLUDETVSERIES("excludetvseries"), INCLUDE100MOVIES("include100movies"), USERNAME("username"), PASSWORD("password"), YSPRO("yspro"), UDID("udid"), QUERY("query"), FIELDS("fields"), THEME("theme"), GENRE("genre"), APIVERSION("apiversion"), ITEM_ID("item_id"), TYPE("type"), NAME("name"), APPLICATION("application"), TERMINAL("terminal"), DRMCLIENTID("drmclientid"), SECONDS("seconds"), CHANNEL_ID("channel_id"), CLIENT("client"), U("u"), INCLUDENOWANDNEXT("includenowandnext"), WIDTH("width"), HEIGHT("height"), QUALITY("quality"), PROGRESS("progress"), SOCIALNETWORK("socialnetwork"), TOKEN("token"), DEVICE("device"), CARROUSEL_LIMIT("carrousellimit"), TV_DATE("tvdate"), SSID("ssid"), STARTOVER("startover"), UUID("uuid"), KEY("key"), TIMEFROM("timefrom"),TIMETO("timeto"), STRUCTURE("structure"), GROUPBY("groupby"), ITEMS("items"), LIST_ID("list_id");

		private String string;
		Parameter(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}
	private static enum SortDirection {
		ASC("asc"), DESC("desc");
		private String string;
		SortDirection(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}
	public static enum DeviceType {
		MOBILE("android-mobile"), TABLET("android-tablet");
		private String string;
		DeviceType(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}
	private static enum Sort {
		TITLE("title"), LICENSE_START("license_start"), LICENSE_END("license_end"), LENGTH("length"), PRICE("price"), YEAR("year"), RATING("rating"), POPULAR("popular");
		private String string;
		Sort(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}
	public static enum Type {
		MOVIES("movies"), TRACKS("tracks"), CHANNELS("channels"), ALBUMS("albums"), MOVIEPACKAGES("moviepackages"), PROGRAMS("programs"), TVSERIES("tvseries"), MOVIE("movie"), PROGRAMSERIES("programseries");
		private String string;
		Type(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}

	public static enum Structure {
		GROUPEDBYFAVORITES("groupedbyfavorites");
		private String string;
		Structure(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}
	public static enum GroupBy {
		CHANNEL("channel");
		private String string;
		GroupBy(final String string) {
			this.string = string;
		}
		@Override 
		public String toString() { 
			return string; 
		} 
	}

	public static enum VodType {
		ONLYTVOD, ONLYSVOD, ALL
	}

	public static final String LOCAL_BROADCAST_LOGIN_SUCCESS = "login_success";
	public static final String LOCAL_BROADCAST_LOGOUT_SUCCESS = "logout_success";
	public static final String LOCAL_BROADCAST_FAVORIT_EMPTY = "favorit_empty";
	public static final String LOCAL_BROADCAST_FAVORIT_NOT_EMPTY = "favorit_not_empty";
	public static final String LOCAL_BROADCAST_FAVORIT_EMPTY_2 = "favorit_empty2";
	public static final String LOCAL_BROADCAST_FAVORIT_NOT_EMPTY_2 = "favorit_not_empty2";

	private static final int LIMIT_OFFSET_VALUE = 20;

	public DataManagerNG_example(final Activity activity) {
		super(activity);
	}

	/**
	 * MSH: Adds the required parameters to the provided bundle depending on the limitTo value.
	 * @param b
	 * @param vodType
	 */
	private static void handleVodType(final QueryMap map, final VodType vodType) {
		switch(vodType) {
			case ONLYSVOD:
				map.put(Parameter.ONLYSVOD, 1);
				break;
			case ONLYTVOD:
				map.put(Parameter.ONLYTVOD, 1);
				break;
			case ALL:
		}
	}

	/* New calls for the TVUniverse */
	
	/**
	 * http://api.yousee.tv/rest/livetv/allowed_channels/includenowandnext/1/structure/groupedbyfavorites/
	 * @param channelIds
	 * @param resultListener
	 */
	public void getOnTvNowFromMyChannels(final GenericResponseCallback<WatchTVStrucure> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.INCLUDENOWANDNEXT, "1");
		qm.put(Parameter.APIVERSION, "2");
		qm.put(Parameter.STRUCTURE, Structure.GROUPEDBYFAVORITES);
		//qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.LIVETV, Function.ALLOWED_CHANNELS, qm, Request.Method.GET, WatchTVStrucure.class, resultListener);
		
	}
	
	
	public void getMyAndOtherChannels(final GenericResponseCallback<WatchTVStrucure> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.STRUCTURE, Structure.GROUPEDBYFAVORITES);
		gsonGenericRequest(Area.LIVETV, Function.ALLOWED_CHANNELS, qm, Request.Method.GET, WatchTVStrucure.class, resultListener);
		
	}
	
	/**
	 * http://api.yousee.tv/rest/archive/popularprograms/groupby/channel/structure/groupedbyfavorites
	 * @param resultListener
	 */
	public void getMostPopularArchivePrograms(final GenericResponseCallback<WatchTVArchiveStructure> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.GROUPBY, GroupBy.CHANNEL);
		qm.put(Parameter.STRUCTURE, Structure.GROUPEDBYFAVORITES);

		gsonGenericRequest(Area.ARCHIVE, Function.POPULAR_PROGRAMS, qm, Request.Method.GET, WatchTVArchiveStructure.class, resultListener);
		
	}

	public void addToFavoriteChannels(final int id, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ITEM_ID, "" + id);
		qm.put(Parameter.TYPE, Type.CHANNELS);
		gsonGenericRequest(Area.USERS, Function.FAVORITE, qm, Request.Method.POST, ResultModel.class, resultListener);
	}

	public void deleteFromFavoriteChannels(final int id, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ITEM_ID, "" + id);
		qm.put(Parameter.TYPE, Type.CHANNELS);
		gsonGenericRequest(Area.USERS, Function.FAVORITE, qm, Request.Method.DELETE, ResultModel.class, resultListener);
	}
	
	public void reOrderFavoriteChannels(final String ids, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ITEMS, ids);
		qm.put(Parameter.LIST_ID, "524680");
		qm.put(Parameter.TYPE, Type.CHANNELS);
		gsonGenericRequest(Area.USERS, Function.FAVORITES_SORTORDER, qm, Request.Method.PUT, ResultModel.class, resultListener);
		
	}


	/* ---------------------------- */
	/*-------------- Archive tv -----------------*/
	
	/**
	 * 
	 * @param channelIds
	 * @param resultListener
	 */
	public void getArchiveGenresByChannelId(final String channelIds, final GenericResponseCallback<Genre[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CHANNEL_ID, channelIds);
		qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.ARCHIVE, Function.GENRES, qm, Request.Method.GET, Genre[].class, resultListener);
	}

	/**
	 * 
	 * @param resultListener
	 */
	public void getAllArchivePrograms(final GenericResponseCallback<Program[]> resultListener) {
		
		gsonGenericRequest(Area.ARCHIVE, Function.PROGRAMS, null, Request.Method.GET, Program[].class, resultListener);
	}
	
	/**
	 * 
	 * @param qm
	 * @param resultListener
	 */
	public void getArchiveProgramsByQueryMap(final QueryMap qm, final GenericResponseCallback<Program[]> resultListener) {
		
		gsonGenericRequest(Area.ARCHIVE, Function.PROGRAMS, qm, Request.Method.GET, Program[].class, resultListener);
	}
	
	/**
	 * 
	 * @param channelIds
	 * @param resultListener
	 */
	public void getArchiveProgramsByChannelId(final String channelIds, final GenericResponseCallback<Program[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CHANNEL_ID, channelIds);

		gsonGenericRequest(Area.ARCHIVE, Function.PROGRAMS, qm, Request.Method.GET, Program[].class, resultListener);
	}
	
	/**
	 * 
	 * @param channelIds
	 * @param tv_date
	 * @param resultListener
	 */
	public void getArchiveProgramsByChannelIdAndDate(final String channelIds, final String tv_date, final GenericResponseCallback<Program[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CHANNEL_ID, channelIds);
		qm.put(Parameter.TV_DATE, tv_date);
		
		gsonGenericRequest(Area.ARCHIVE, Function.PROGRAMS, qm, Request.Method.GET, Program[].class, resultListener);
	}

	/**
	 *
	 * @param genreId
	 * @param resultListener
	 */
	public void getArchiveProgramsByGenre(final String genreId, final GenericResponseCallback<Program[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.GENRE, genreId);
		gsonGenericRequest(Area.ARCHIVE, Function.PROGRAMS, qm, Request.Method.GET, Program[].class, resultListener);
	}
	
	public void getPopularArchivePrograms( final GenericResponseCallback<Programs> resultListener) {
		
		gsonGenericRequest(Area.ARCHIVE, Function.POPULAR_PROGRAMS, null, Request.Method.GET, Programs.class, resultListener);
	}
	
	/**
	 * 
	 * @param channelIds
	 * @param resultListener
	 */
	public void getPopularArchiveProgramsByChannelId(final String channelIds, final GenericResponseCallback<Programs> resultListener) {
		
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CHANNEL_ID, channelIds);
		qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.ARCHIVE, Function.POPULAR_PROGRAMS, qm, Request.Method.GET, Programs.class, resultListener);
	}
	
	/**
	 * 
	 * @param channelId(s), comma separated String
	 * @param genreId
	 * @param resultListener
	 */
	public void getPopularArchiveProgramsByChannelIdAndGenre(final String channelIds, final String genreId, final GenericResponseCallback<Programs> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CHANNEL_ID, channelIds);
		qm.put(Parameter.GENRE, genreId);
		qm.put(CACHE, CACHE_AND_REQUEST);

		gsonGenericRequest(Area.ARCHIVE, Function.POPULAR_PROGRAMS, qm, Request.Method.GET, Programs.class, resultListener);
	}
	
	/**
	 * 
	 * @param genreId
	 * @param resultListener
	 */
	public void getPopularArchiveProgramsByGenre(final String genreId, final GenericResponseCallback<Program[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.GENRE, genreId);
		qm.put(CACHE, CACHE_AND_REQUEST);

		gsonGenericRequest(Area.ARCHIVE, Function.POPULAR_PROGRAMS, qm, Request.Method.GET, Program[].class, resultListener);
	}
	
	
	/*-------------------------------------------- Archive end ----------------------------------*/


    /**
     * @param channelIds channel ids
     * @param resultListener listener
     *
     */
    public void getTvguideProgramsByChannelWithStartTimeEndTime(final String channelIds,String fields,Date startTime,Date endTime, final GenericResponseCallback<Program[]> resultListener) {
        final QueryMap qm = getQueryMap();
        qm.put(Parameter.CHANNEL_ID, channelIds);
        qm.put(Parameter.FIELDS,fields);
        qm.put(Parameter.TIMEFROM,timeDataFormat.format(startTime));
        qm.put(Parameter.TIMETO,timeDataFormat.format(endTime));
        gsonGenericRequest(Area.TVGUIDE, Function.PROGRAMS, qm, Request.Method.GET, Program[].class, resultListener);
    }


    /**
     * @param channelIds channel ids
     * @param resultListener listener
     *
     */
    public void getTvguideProgramsByChannel(final String channelIds,String fields, final GenericResponseCallback<Program[]> resultListener) {
        final QueryMap qm = getQueryMap();
        qm.put(Parameter.CHANNEL_ID, channelIds);
        qm.put(Parameter.FIELDS,fields);

        gsonGenericRequest(Area.TVGUIDE, Function.PROGRAMS, qm, Request.Method.GET, Program[].class, resultListener);
    }




    public void getAllowedChannels(final String udid, final GenericResponseCallback<Channel[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.U, udid);
		qm.put(Parameter.SORT, Sort.YEAR);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);	
		qm.put(Parameter.INCLUDENOWANDNEXT, "1");
		//MST: API Version 2 gives us TV Everywhere property
		qm.put(Parameter.APIVERSION, "2");
		qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.LIVETV, Function.ALLOWED_CHANNELS, qm, Request.Method.GET, Channel[].class, resultListener);
	}

	public static void getCategories() {
	}

	public void getIsYouSeeIP(final GenericResponseCallback<ResultModel> resultListener) {
		gsonGenericRequest(Area.USERS, Function.ISYOUSEEIP, null, Request.Method.GET, ResultModel.class, resultListener);
	}

	public static void getMoviesInGenre(final Parameter parameter_limit_offset, final GenericResponseCallback<ArrayList<MovieInfo>> resultListener) {
	}

	public void getAllMoviesInTheme(final VodType vodType, final String theme, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.THEME, theme);
		qm.put(Parameter.SORT, Sort.LICENSE_START);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.LIMIT, -1);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		gsonGenericRequest(Area.MOVIE, Function.MOVIES_IN_THEME, qm, Request.Method.GET, Movies.class, resultListener);
	}

	public void getAllMoviesInGenre(final VodType vodType, final String theme, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.GENRE, theme);
		qm.put(Parameter.SORT, Sort.LICENSE_START);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.LIMIT, -1);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		gsonGenericRequest(Area.MOVIE, Function.MOVIES_IN_GENRE, qm, Request.Method.GET, Movies.class, resultListener);
	}

	public void getMovieStreamURL(final String movieId, final String drmClientId, final GenericResponseCallback<StreamUrl> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.MOVIE_ID, movieId);
		qm.put(Parameter.APPLICATION, "android");
		qm.put(Parameter.TERMINAL, "samsung");
		qm.put(Parameter.DRMCLIENTID, base64Encode(drmClientId));
		qm.put(Parameter.TYPE, Type.MOVIE);
		gsonGenericRequest(Area.MOVIE, Function.STREAMURL, qm, Request.Method.GET, StreamUrl.class, resultListener);
	}

	//TODO: Kenne should remove redundant parameter U
	@Deprecated
	/**
	 * Use overloaded getLiveStreamURL(final int channelId, final String drmClientId, boolean startOver ..)
	 * @param channelId
	 * @param drmClientId
	 * @param resultListener
	 */
	public void getLiveStreamURL(final int channelId, final String drmClientId, final GenericResponseCallback<StreamUrl> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CHANNEL_ID, channelId);
		qm.put(Parameter.APPLICATION, "android");
		qm.put(Parameter.CLIENT, "android-hls");
		qm.put(Parameter.U, base64Encode(drmClientId));
		qm.put(Parameter.DRMCLIENTID, base64Encode(drmClientId));
		gsonGenericRequest(Area.LIVETV, Function.STREAMURL, qm, Request.Method.GET, StreamUrl.class, resultListener);
	}
	
	public void getLiveStreamURL(final int channelId, final String drmClientId, boolean startOver, final GenericResponseCallback<StreamUrl> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CHANNEL_ID, channelId);
		qm.put(Parameter.APPLICATION, "android");
		qm.put(Parameter.CLIENT, "android-hls");
		qm.put(Parameter.U, base64Encode(drmClientId));
		qm.put(Parameter.STARTOVER, startOver);
		qm.put(Parameter.DRMCLIENTID, base64Encode(drmClientId));
		gsonGenericRequest(Area.LIVETV, Function.STREAMURL, qm, Request.Method.GET, StreamUrl.class, resultListener);
	}

	public void setMovieBookmark(final String movieId, final int seconds, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, movieId);
		qm.put(Parameter.TYPE, Type.MOVIE);
		qm.put(Parameter.SECONDS, seconds);
		gsonGenericRequest(Area.USERS, Function.BOOKMARK, qm, Request.Method.POST, ResultModel.class, resultListener);
	}

	public void getBookmark(final String movieId, final GenericResponseCallback<Bookmark> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, movieId);
		qm.put(Parameter.TYPE, Type.MOVIE);
		gsonGenericRequest(Area.USERS, Function.BOOKMARK, qm, Request.Method.GET, Bookmark.class, resultListener);
	}

	public void getBookmarks(final String movieIds, final GenericResponseCallback<Bookmarks> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.MOVIE_ID, movieIds);
		qm.put(Parameter.TYPE, Type.MOVIE);
		qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.USERS, Function.BOOKMARKS, qm, Request.Method.GET, Bookmarks.class, resultListener);
	}

	// Adds movie to Film shelf (movie_log_add)
	public void addToMovieLog(final String movieId) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, movieId);
		qm.put(Parameter.TYPE, Type.MOVIE);
		qm.put(Parameter.PROGRESS, 1);	// bruges ikke, men burde vaere i % af hvor lang tid den er blevet afspillet
		gsonGenericRequest(Area.USERS, Function.MOVIELOG, qm, Request.Method.POST, Status.class, null);
	}

	// Gets film shelf (last seen) aka movie_log
	public void getFilmShelf() {
	}

	public void getTVShow(final String id, final VodType vodType, final GenericResponseCallback<TvShow> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, id);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		gsonGenericRequest(Area.MOVIE, Function.TVSHOW, qm, Request.Method.GET, TvShow.class, resultListener);
	}

	public void getTVShowSeason(final String id, final VodType vodType, final GenericResponseCallback<TvShowSeason> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, id);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		gsonGenericRequest(Area.MOVIE, Function.TVSHOWSEASON, qm, Request.Method.GET, TvShowSeason.class, resultListener);
	}
	
/*
 * Example on how to combine requests
	public static void dummy(final String id, final VodType vodType, final GenericResponseCallback<ArrayList<MovieInfo>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, id);
		handleVodType(qm, vodType);

		requestGenericSingleObject(Area.MOVIE, Function.TVSHOWSEASON, qm, Request.Method.GET, new GenericResponseCallback<JSonModel>() {
				@Override
				public void onSuccess(JSonModel response) {
					final TvShowSeason season = (TvShowSeason) response;
					// MSH: Request data for all episodes in season.
					final StringBuffer tvShowIDs = new StringBuffer(100);
					if(season.getMoviesInPackage() != null)
						for(final String id : season.getMoviesInPackage()) {
							tvShowIDs.append(',');
							tvShowIDs.append(id);
						}
					if(tvShowIDs.length() > 0)
						tvShowIDs.deleteCharAt(0);
					DataManagerNG.getMoviesInfo(tvShowIDs.toString(), resultListener);
				}
	
				@Override
				public void onError(ErrorModel error) {}
			},
			TvShowSeason.class
		);
	}
*/

	public void getTvShows(final Parameter parameterLimitOffset, final VodType vodType, final GenericResponseCallback<TvShows> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(parameterLimitOffset, LIMIT_OFFSET_VALUE);
		qm.put(Parameter.SORT, Sort.POPULAR);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		gsonGenericRequest(Area.MOVIE, Function.TVSHOWS, qm, Request.Method.GET, TvShows.class, resultListener);
	}

	public void getAllTvShows(final VodType vodType, final GenericResponseCallback<TvShows> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.LIMIT, -1);
		qm.put(Parameter.SORT, Sort.POPULAR);
		qm.put(Parameter.FIELDS, "name,id,popularity_score,svod,tvod,cmore,artwork.medium");
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		gsonGenericRequest(Area.MOVIE, Function.TVSHOWS, qm, Request.Method.GET, TvShows.class, resultListener);
	}

	/*
	 * Returns device unique ID from shared preferences.
	 */
	public static void getUDID() {
	}

	public void getMovieAccess(final String movieId, final GenericResponseCallback<Access> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.MOVIE_ID, movieId);
		gsonGenericRequest(Area.USERS, Function.MOVIEACCESS, qm, Request.Method.GET, Access.class, resultListener);
	}
	public void getMovieAccessMulti(final String movieIds, final GenericResponseCallback<Access[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.MOVIE_ID, movieIds);
		gsonGenericRequest(Area.USERS, Function.MOVIEACCESS, qm, Request.Method.GET, Access[].class, resultListener);
	}

	public void doMovieSearch() {
	}
/*
	public void getTeasers(final GenericResponseCallback<ArrayList<Teaser>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		requestGenericObject(Area.MOVIE, Function.TEASERS, qm, Request.Method.GET, resultListener, Teaser.class);
	}
*/
	public void doKeepAlive(final GenericResponseCallback<ResultModel> resultListener) {
		gsonGenericRequest(Area.USERS, Function.KEEPALIVE, null, Request.Method.PUT, ResultModel.class, resultListener);
	}

	/**
	 * NB! not used
	 * @param resultListener
	 */
	public void doLogout(final GenericResponseCallback<ResultModel> resultListener) {
		gsonGenericRequest(Area.USERS, Function.LOGOUT, null, Request.Method.GET, ResultModel.class, resultListener);
	}

	public void doLogin(final String userName, final String Password,  final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.USERNAME, userName);
		qm.put(Parameter.PASSWORD, Password);
		gsonGenericRequest(Area.USERS, Function.LOGIN, qm, Request.Method.GET, ResultModel.class, resultListener);
	}

	public void getUser(final GenericResponseCallback<User> resultListener) {
		gsonGenericRequest(Area.USERS, Function.USER, null, Request.Method.GET, User.class, resultListener);
	}

	public void getGenres( final GenericResponseCallback<Genre[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		gsonGenericRequest(Area.MOVIE, Function.GENRES, qm, Request.Method.GET, Genre[].class, resultListener);
	}

	public void getThemes( final GenericResponseCallback<Theme[]> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.INCLUDE100MOVIES, 1);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		gsonGenericRequest(Area.MOVIE, Function.THEMES, qm, Request.Method.GET, Theme[].class, resultListener);
	}

	public void getMovieInfo(final String movieId, final GenericResponseCallback<MovieInfo> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, movieId);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		gsonGenericRequest(Area.MOVIE, Function.MOVIEINFO, qm, Request.Method.GET, MovieInfo.class, resultListener);
	}

	public void getMoviesInfo(final String movieIds, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, movieIds);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		gsonGenericRequest(Area.MOVIE, Function.MOVIEINFO, qm, Request.Method.GET, Movies.class, resultListener);
	}

	/**
	 * Combined request method for hiding the complexity of getting the movieinfo data for last seen.
	 * @param limit
	 * @param resultListener
	 */
	public void getLastViewed(Parameter parameter_limit_offset, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(parameter_limit_offset, LIMIT_OFFSET_VALUE);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.MOVIE, Function.MOVIELOG, qm, Request.Method.GET, Movies.class, resultListener);
	}
	public void getLastViewed(final int limit, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.LIMIT, limit);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.MOVIE, Function.MOVIELOG, qm, Request.Method.GET, Movies.class, resultListener);
	}

	public void getMovieLog(final String movieIds, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ID, movieIds);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(CACHE, CACHE_AND_REQUEST);
		gsonGenericRequest(Area.MOVIE, Function.MOVIELOG, qm, Request.Method.GET, Movies.class, resultListener);
	}
/*
	public void getNewestMovies(Parameter parameter_limit_offset, final VodType vodType, final GenericResponseCallback<ArrayList<Item>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(parameter_limit_offset, LIMIT_OFFSET_VALUE);
		qm.put(Parameter.EXCLUDETVSERIES, 1);
		qm.put(Parameter.SORT, Sort.YEAR);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		requestGenericObject(Area.MOVIE, Function.ALL, qm, Request.Method.GET, resultListener, MovieInfo.class);
	}

	public void getAllNewestMovies(final VodType vodType, final GenericResponseCallback<ArrayList<MovieInfo>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.LIMIT, 100);
		qm.put(Parameter.EXCLUDETVSERIES, 1);
		qm.put(Parameter.SORT, Sort.YEAR);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		requestGenericObject(Area.MOVIE, Function.ALL, qm, Request.Method.GET, resultListener, MovieInfo.class);
	}

	public void getLatestMovies(Parameter parameter_limit_offset, final VodType vodType, final GenericResponseCallback<ArrayList<Item>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(parameter_limit_offset, LIMIT_OFFSET_VALUE);
		qm.put(Parameter.EXCLUDETVSERIES, 1);
		qm.put(Parameter.SORT, Sort.LICENSE_START);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		requestGenericObject(Area.MOVIE, Function.ALL, qm, Request.Method.GET, resultListener, MovieInfo.class);
	}

	public void getAllLatestMovies(final VodType vodType, final GenericResponseCallback<ArrayList<MovieInfo>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.LIMIT, 100);
		qm.put(Parameter.EXCLUDETVSERIES, 1);
		qm.put(Parameter.SORT, Sort.LICENSE_START);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		requestGenericObject(Area.MOVIE, Function.ALL, qm, Request.Method.GET, resultListener, MovieInfo.class);
	}
*/
	/**
	 * Get all movies.
	 * @param limitTo
	 * @param resultListener
	 */
/*
	public void getAllMovies(Parameter parameter_limit_offset, final VodType limitTo,  final GenericResponseCallback<ArrayList<MovieInfo>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(parameter_limit_offset, LIMIT_OFFSET_VALUE);
		qm.put(Parameter.SORT, Sort.POPULAR);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		requestGenericObject(Area.MOVIE, Function.ALL, qm, Request.Method.GET, resultListener, MovieInfo.class);
	}
*/
	/**
	 * 
	 * @param queryString
	 * @param resultListener
	 */
	public void doTypeaheadSearch(final String queryString, final GenericResponseCallback<Suggestions> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.QUERY, queryString);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		gsonGenericRequest(Area.MOVIE, Function.TYPEAHEAD_SEARCH, qm, Request.Method.GET, Suggestions.class, resultListener);
	}

	/**
	 * Get movies related to another movie.
	 * @param limitTo
	 * @param limit
	 * @param movieId
	 * @param resultListener
	 */
	public void getRelated(final VodType vodType, final String movieId, final GenericResponseCallback<ArrayList<Item>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.LIMIT, LIMIT_OFFSET_VALUE);
		qm.put(Parameter.MOVIE_ID, movieId);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		requestGenericArray(Area.MOVIE, Function.RELATED, qm, resultListener, Item.class);
	}
/*
	public void getTopMovies(final Parameter parameter_limit_offset, final VodType vodType, final GenericResponseCallback<ArrayList<Item>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(parameter_limit_offset, LIMIT_OFFSET_VALUE);
		qm.put(Parameter.SORT, Sort.POPULAR);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		requestGenericObject(Area.MOVIE, Function.ALL, qm, Request.Method.GET, resultListener, MovieInfo.class);
	}

	public void getTop30Movies(final VodType vodType, final GenericResponseCallback<ArrayList<MovieInfo>> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.LIMIT, 30);
		qm.put(Parameter.SORT, Sort.POPULAR);
		qm.put(Parameter.SORTDIRECTION, SortDirection.DESC);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(Parameter.CACHE, DEFAULT_CACHE_TIMEOUT);
		handleVodType(qm, vodType);
		requestGenericObject(Area.MOVIE, Function.ALL, qm, Request.Method.GET, resultListener, MovieInfo.class);
	}
*/
	public void getFavorites(final Type type, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.TYPE, type);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		gsonGenericRequest(Area.MOVIE, Function.FAVORITES, qm, Request.Method.GET, Movies.class, resultListener);
	}
	public void getAllFavorites(final GenericResponseCallback<Movies> resultListener) {
		getFavorites(Type.MOVIES, resultListener);
	}

	public void setFavorite(final String id, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ITEM_ID, id);
		qm.put(Parameter.TYPE, Type.MOVIES);
		gsonGenericRequest(Area.USERS, Function.FAVORITE, qm, Request.Method.POST, ResultModel.class, resultListener);
	}

	public void deleteFavorite(final String id, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.ITEM_ID, id);
		qm.put(Parameter.TYPE, Type.MOVIES);
		gsonGenericRequest(Area.USERS, Function.FAVORITE, qm, Request.Method.DELETE, ResultModel.class, resultListener);
	}

	public void getMovieSearchResults(final String query, final GenericResponseCallback<Movies> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.QUERY, query);
		qm.put(Parameter.FIELDS, FIELDS_LITE);
		qm.put(CACHE, DEFAULT_CACHE_TIMEOUT);
		gsonGenericRequest(Area.MOVIE, Function.SEARCH, qm, Request.Method.GET, Movies.class, resultListener);
	}

	public void removeDevice(final String udid, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.UDID, udid);
		gsonGenericRequest(Area.USERS, Function.DEVICE, qm, Request.Method.DELETE, ResultModel.class, resultListener);
	}

	public void addDevice(final String udid, final String name, final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.UDID, udid);
		qm.put(Parameter.NAME, name);
		gsonGenericRequest(Area.USERS, Function.DEVICE, qm, Request.Method.POST, ResultModel.class, resultListener);
	}

	public void getDevices(final String udid, final GenericResponseCallback<Devices> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.UDID, udid);
		gsonGenericRequest(Area.USERS, Function.DEVICES, qm, Request.Method.GET, Devices.class, resultListener);
	}

	/**
	 * Return pages for either tvod or svod.
	 * @param type
	 * @param resultListener
	 */
	public void getPages(final VodType type, final DeviceType deviceType, final GenericResponseCallback<Page[]> resultListener) {
		getFrontpages(deviceType, new GenericResponseCallback<Frontpages>() {
			@Override
			public void onSuccess(final Frontpages frontpages) {
				//clpet, burde returnere med error...
				if(frontpages == null)
					return;
				final QueryMap qm = getQueryMap();
				qm.put(CACHE, CACHE_AND_REQUEST);
				qm.put(Parameter.FIELDS, FIELDS_FRONTPAGE);
				qm.put(Parameter.CARROUSEL_LIMIT, 20);//CLPET: burde bruge konstant
				qm.put(Parameter.ID, (type == VodType.ONLYSVOD) ? frontpages.getSvodId() : frontpages.getTvodId());
				gsonGenericRequest(Area.MOVIE, Function.PAGE, qm, Request.Method.GET, Page[].class, resultListener);
			}

			@Override
			public void onError(ErrorModel error) {
				Log.d(TAG, "onError: " + error);
			}
		});
	}

	/**
	 * Retrive unique tvod/svod ids for frontpage pages.
	 * @param resultListener
	 */
	private void getFrontpages(final DeviceType deviceType, final GenericResponseCallback<Frontpages> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(CACHE, DAY_CACHE_TIMEOUT);
		qm.put(Parameter.DEVICE, deviceType);
		gsonGenericRequest(Area.SYSTEM, Function.CONFIGURATION, qm, Request.Method.GET, Frontpages.class, resultListener);
	}

	/**
	 * MST: Register facebook token with YouSee login
	 * @param token
	 */
	public void registerFacebook(final String token,  final GenericResponseCallback<ResultModel> resultListener) {
		final QueryMap qm = getQueryMap();
		qm.put(Parameter.TOKEN, token);
		qm.put(Parameter.SOCIALNETWORK, "facebook");
		gsonGenericRequest(Area.USERS, Function.SOCIALREGISTRATION, qm, Request.Method.POST, ResultModel.class, resultListener);
	}

	/**
	 * MSH: Return correct scaled TV show cover based on resource dimension values. 
	 * @param tvShow
	 * @return
	 */
	public String getTvSeriesWideCover(final TvShow tvShow) {
		final ArtWork artWork = tvShow.getCovers();
		final float scaleRatio = getActivity().getResources().getDisplayMetrics().density;
		final float width = getActivity().getResources().getDimension(R.dimen.tvshow_list_item_width);
		final float height = getActivity().getResources().getDimension(R.dimen.tvshow_list_item_height);
		return getCompressedUrl(artWork.getMedium(), (int)(width/scaleRatio), (int)(height/scaleRatio));
	}

	public void getMoviePage(final String url, final GenericResponseCallback<Movies> resultListener) {
		rawRequest(url, DEFAULT_CACHE_TIMEOUT, Movies.class, resultListener);
	}

	public void getTvShowPage(final String url, final GenericResponseCallback<TvShows> resultListener) {
		rawRequest(url, DEFAULT_CACHE_TIMEOUT, TvShows.class, resultListener);
	}

	public void getActorPage(final String url, final GenericResponseCallback<Actor[]> resultListener) {
		rawRequest(url, DEFAULT_CACHE_TIMEOUT, Actor[].class, resultListener);
	}

	/**
	 * Request data from url and handle caching.
	 * Note this will replace the API (if any) placeholder with the correct server address.
	 * TODO: Can the other request that uses JsonObjectExtendedRequest call this to avoid having the same code twice?
	 * @param url
	 * @param resultListener
	 */
	protected <T> void rawRequest(String url, final int ttl, final Class<T> clazz, final GenericResponseCallback<T> resultListener) {
		// MSH: Allow direct use of  the url from the PAGE response.
		if(url.indexOf("API/") != -1)
			url = url.replaceAll("^API", Config.SERVER_ADDRESS);
		url += "&" + Parameter.FIELDS.toString() + "=" + FIELDS_LITE;
		Log.d(TAG, "rawRequest: " + url);
		gsonGenericRequest(Method.GET, url, null, ttl, clazz, resultListener);
	}

	/**
	 * Return a url with a image of the requested size scaled correctly.
	 * @param url
	 * @param width
	 * @param height
	 * @return
	 */
	public static String getCompressedUrl(final String url, final float width, final float height) {
		final QueryMap qm = getQueryMap();
		qm.setQueryTemplate(QUERY_PATTERN);
		qm.put(Parameter.WIDTH, width);
		qm.put(Parameter.HEIGHT, height);
		qm.put(Parameter.QUALITY, IMAGE_QUALITY);

		String urlEncoded = "";
		try {
			urlEncoded = URLEncoder.encode(url, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			Log.e(TAG, "UnsupportedEncodingException: " + e);
		}
		return generateUrl(Area.CONTENT, Function.IMAGE, qm.toString()) + "/API-Key/" + API_KEY + "?url=" + urlEncoded;
	}
}
